# This workflow will install Python dependencies, run tests and lint with a variety of Python versions and Operating Systems
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test Changes

on: [push, pull_request]

jobs:
  run-guard:
    # it succeeds if any of the following conditions are met:
    #   - when the PR is not a draft and is not labeled 'prevent-ci'
    #   - when the PR is labeled 'force-ci'
    runs-on: ubuntu-latest
    if: |
      (  (!github.event.pull_request.draft) &&
         (github.event.action != 'labeled') &&
         (!contains( github.event.pull_request.labels.*.name, 'prevent-ci')) )
      || ((github.event.action != 'labeled') && contains( github.event.pull_request.labels.*.name, 'force-ci'))
      || (github.event.label.name == 'force-ci')
    steps:
      - name: Checking if CI shoud run for this push/PR...
        run: echo Resuming CI. Continuing next jobs...

  test-source-code:
    needs: run-guard
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        python: [2.7, 3.6, 3.7, 3.8, 3.9]

    runs-on: "${{ matrix.os }}"

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install linux tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends python3-h5py

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-tests.txt

      - name: Setup environment variables for remote filesystem testing
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.8'
        run: |
          echo "Setup SMB environment variable to trigger testing in Petl"
          echo 'PETL_TEST_SMB=smb://WORKGROUP;user1:pass1@localhost/public/' >> $GITHUB_ENV
          echo "Setup SFTP environment variable to trigger testing in Petl"
          echo 'PETL_TEST_SFTP=sftp://user1:pass1@localhost:2244/public/' >> $GITHUB_ENV
          python -m pip install -r requirements-remote.txt

      - name: Install containers for remote filesystem testing
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.8'
        run: |
          echo "Setup docker for SMB at: ${{ env.PETL_TEST_SMB }}$"
          docker run -it --name samba -p 139:139 -p 445:445 -d "dperson/samba" -p -u "user1;pass1" -s "public;/public-dir;yes;no;yes;all"
          echo "Setup docker for SFTP at: ${{ env.PETL_TEST_SFTP }}$"
          docker run -it --name sftp -p 2244:22 -d atmoz/sftp user2:pass2:::public

      - name: Install containers for remote database testing
        if: matrix.os == 'ubuntu-latest' && matrix.python >= '3.6'
        run: |
          docker run -it --name mysql -p 3306:3306 -p 33060:33060 -e MYSQL_ROOT_PASSWORD=pass0 -e MYSQL_DATABASE=petl -e MYSQL_USER=petl -e MYSQL_PASSWORD=test -d mysql:latest
          docker run -it --name postgres -p 5432:5432 -e POSTGRES_DB=petl -e POSTGRES_USER=petl -e POSTGRES_PASSWORD=test -d postgres:latest
          python -m pip install cryptography pymysql SQLAlchemy psycopg2-binary

      - name: Setup petl package
        run: python setup.py sdist bdist_wheel

      - name: Test python source code
        run: nosetests -v petl --with-coverage --cover-package=petl

      - name: Print source code coverage
        run: coverage report -m

      - name: Test documentation inside source code
        if: |
          matrix.python >= '3.6' && matrix.python != '3.9' &&
          (matrix.os != 'windows-latest' || matrix.python == '3.8')
        run: |
          python -m pip install -r requirements-doctests.txt
          # coverage run -m nose -v --with-coverage --cover-package=petl --with-doctest --doctest-options=+NORMALIZE_WHITESPACE petl -I"csv_py2\.py" -I"db\.py"
          nosetests -v --with-coverage --cover-package=petl --with-doctest --doctest-options=+NORMALIZE_WHITESPACE petl -I"csv_py2\.py" -I"db\.py"

      # - name: Coveralls
      #   if: matrix.os == 'ubuntu-latest' && matrix.python == '3.8'
      #   # uses: coverallsapp/github-action@master
      #   uses: AndreMiras/coveralls-python-action@develop
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Coveralls
        if: matrix.os == 'ubuntu-latest' && matrix.python == '3.8'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m pip install --upgrade coveralls
          python -m pip list  | grep cover
          coveralls --service=github

  test-documentation:
    needs: run-guard
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.8]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install doc generation dependencies
        run: |
          python -m pip install -r requirements-docs.txt

      - name: Setup petl package
        run: python setup.py build

      - name: Test docs generation
        run: |
          cd docs
          sphinx-build -W -b singlehtml -d ../build/doctrees . ../build/singlehtml
