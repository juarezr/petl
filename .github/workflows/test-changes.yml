# This workflow will install Python dependencies, run tests and lint with a variety of Python versions and Operating Systems
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test Changes

on: [push, pull_request]

jobs:
  run-guard:
    # it succeeds if any of the following conditions are met:
    #   - when the PR is not a draft and is not labeled 'prevent-ci'
    #   - when the PR is labeled 'force-ci'
    runs-on: ubuntu-latest
    if: |
      (  (!github.event.pull_request.draft) &&
         (github.event.action != 'labeled') &&
         (!contains( github.event.pull_request.labels.*.name, 'prevent-ci')) )
      || ((github.event.action != 'labeled') && contains( github.event.pull_request.labels.*.name, 'force-ci'))
      || (github.event.label.name == 'force-ci')
    steps:
      - name: Checking if CI shoud run for this push/PR...
        run: echo Resuming CI. Continuing next jobs...

  test-source-code:
    needs: run-guard
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        python: [2.7, 3.6, 3.7, 3.8, 3.9]
    runs-on: "${{ matrix.os }}"
    env:
      doctest: "true"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Evaluate when doctest
        if: |
          matrix.os == 'windows-latest' && (matrix.python == '3.6' || matrix.python == '3.7' ) ||
          matrix.os == 'macos-latest' && matrix.python == '3.9' ||
          matrix.python == '2.7'
        run: |
          echo "::set-env name=doctest::false"
          echo "Skipping doctest due to failures in setup of some packages."

      - name: Install linux tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends python3-h5py

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-tests.txt

      - name: Setup petl package
        run: python setup.py sdist bdist_wheel

      - name: Test python source code
        run: nosetests -v petl --with-coverage --cover-package=petl

      - name: Install doctest dependencies - ${{ env.doctest }}
        if: env.doctest != 'false'
        run: python -m pip install -r requirements-doctests.txt

      - name: Test documentation inside source code - ${{ env.doctest }}
        if: env.doctest != 'false'
        run: nosetests -v --with-coverage --cover-package=petl --with-doctest --doctest-options=+NORMALIZE_WHITESPACE petl -I"csv_py2\.py" -I"db\.py"

      - name: Print source code coverage
        run: coverage report -m

      - name: Export source code coverage to XML
        if: matrix.coveralls
        run: |
          coverage xml -o build/coverage.xml
          ls -l build/

      - name: Coveralls
        uses: coverallsapp/github-action@master
        if: matrix.coveralls
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: 'build/coverage.xml'

  test-documentation:
    needs: run-guard
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.8]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install doc generation dependencies
        run: |
          python -m pip install -r requirements-docs.txt

      - name: Setup petl package
        run: python setup.py build

      - name: Test docs generation
        run: |
          cd docs
          sphinx-build -W -b singlehtml -d ../build/doctrees . ../build/singlehtml
